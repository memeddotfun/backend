// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  address String @unique
  nonce Nonce[]
  reward Reward[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id String @id @default(uuid())
  fairLaunchId String
  address String? @unique
  ipfsHash String @unique
  airdrop Airdrop[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Airdrop {
  id String @id @default(uuid())
  token Token @relation(fields: [tokenId], references: [id])
  tokenId String
  merkleRoot String
  reward Reward[]
  processed Boolean @default(false)
  amount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reward {
  id String @id @default(uuid())
  airdrop Airdrop @relation(fields: [airdropId], references: [id])
  airdropId String
  user User @relation(fields: [userId], references: [id])
  userId String
  amount Int
  proof String[]
  claimed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nonce {
  id String @id @default(uuid())
  nonce Int @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}