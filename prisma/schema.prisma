// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id String @id @default(uuid())
  address String @unique
  lensUsername String @unique
  role Role @default(USER)
  session Session[]
  token Token[]
  nonce Nonce[]
  lastLogin DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id String @id @default(uuid())
  fairLaunchId String @unique
  address String? @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  image Image @relation(fields: [imageId], references: [id])
  imageId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(uuid())
  ipfsCid String @unique
  s3Key String @unique
  token Token[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nonce {
  id String @id @default(uuid())
  nonce String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  session String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  id String @id @default(uuid())
  key String @unique
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}